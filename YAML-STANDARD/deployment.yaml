apiVersion: v1
kind: Namespace
metadata:
  name: standard

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgresql-pvc
  namespace: standard
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: local-path
  resources:
    requests:
      storage: 10Gi

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: fastapi-ingress
  namespace: standard
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  ingressClassName: traefik
  rules:
  - host: fastapi.willdf.fr
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: fastapi-service
            port:
              number: 5000
  tls:
  - hosts:
    - fastapi.willdf.fr
    secretName: letsencrypt-prod

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgresql-deployment
  namespace: standard
  labels:
    app: postgresql
    namespace: standard
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgresql
  template:
    metadata:
      labels:
        app: postgresql
    spec:
      containers:
        - image: postgres:12.0-alpine
          name: postgresql
          env:
            - name: POSTGRES_USER
              value: "admin"
            - name: POSTGRES_PASSWORD
              value: "password"
            - name: POSTGRES_DB
              value: "storedb"
            - name: POSTGRES_HOST_AUTH_METHOD
              value: "trust"
#          envFrom:
#           - secretRef:
#                name: postgres-user-data
          ports:
            - containerPort: 5432
              protocol: TCP
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgresql-storage
      volumes:
        - name: postgresql-storage
          persistentVolumeClaim:
            claimName: postgresql-pvc

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: fastapi-deployment
  namespace: standard
  labels:
    app: fastapi-deployment
spec:
  selector:
    matchLabels:
      app: fastapi-deployment
  replicas: 3
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: fastapi-deployment
    spec:
      containers:
        - name: fastapi
          image: killuazoaldyek/my_fastapi
          ports:
            - containerPort: 5000
          resources:
            requests:
              cpu: "100m"

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: pgadmin-deployment
  namespace: standard
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pgadmin
  template:
    metadata:
      labels:
        app: pgadmin
    spec:
      containers:
        - name: pgadmin
          image: dpage/pgadmin4
          ports:
            - containerPort: 80
          env:
            - name: PGADMIN_DEFAULT_EMAIL
              value: admin@example.com
            - name: PGADMIN_DEFAULT_PASSWORD
              value: admin

---

apiVersion: v1
kind: Service
metadata:
  name: fastapi-service
  namespace: standard 
spec:
  selector:
    app: fastapi-deployment
  ports:
    - protocol: TCP
      port: 5000
      targetPort: 5000

---

apiVersion: v1
kind: Service
metadata:
  name: pgadmin-service
  namespace: standard
spec:
  type: NodePort
  selector:
    app: pgadmin
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80

---

apiVersion: v1
kind: Service
metadata:
  name: db
  namespace: standard
spec:
  selector:
    app: postgresql
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432

---

apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
 name: hpa-fastapi
 namespace: standard
spec:
 scaleTargetRef:
   apiVersion: apps/v1
   kind: Deployment
   name: fastapi-deployment
 minReplicas: 3
 maxReplicas: 6
 targetCPUUtilizationPercentage: 70

---

apiVersion: cert-manager.io/v1
kind: ClusterIssuer # I'm using ClusterIssuer here
metadata:
  name: letsencrypt-prod
  namespace: standard
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: william.dalfarra1@gmail.com
    privateKeySecretRef:
      name: letsencrypt-prod
    solvers:
    - http01:
        ingress:
          class: traefik 
